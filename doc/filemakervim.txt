*filemakervim.txt*	For Vim version 7.3 or later	Last change: 2014 Jul 11

             Vim Plugin for Working with FileMaker Calculations~

filemaker.vim															*FileMakerVim* *FMV*

1. Description                            |FileMakerVim-description|
	1.1 Requirements                        |FileMakerVim-requirements|
	1.1.1 UltiSnips                         |FileMakerVim-ultisnips|
	1.1.2 QuickCursor                       |FileMakerVim-quickcursor|
	1.2 Acknowledgments                     |FileMakerVim-acknowledgments|
2. Installation                           |FileMakerVim-installnupdate|
	2.1 Vundle                              |FileMakerVim-vundle|
	2.2 UltiSnips														|FileMakerVim-ultisnips-install|
	2.3 filemaker.vim												|FileMakerVim-install|
3. Settings                               |FileMakerVim-settings|
	3.1 Default Conventions                 |FileMakerVim-defaultconventions|
	3.2 Overriding Conventions              |FileMakerVim-overridingconventions|
	3.3 Triggers                            |FileMakerVim-triggers|
4. Helping Out                            |FileMakerVim-helping|
5. Contact                                |FileMakerVim-contact|
6. Contributors                           |FileMakerVim-contribtors|

==============================================================================
																	*FileMakerVim-description* *FMV-description*
1. Description

filemaker.com provides syntax highlighting and snippet support for FileMaker
calculations to be edited in Vim. It detects the filetype for the extentions
filemaker, fmcalc, fm and fmfn. It also recognizes FileMaker calcs that have
been opened using the QuickCursor app on OS X (|FileMakerVim-quickcursor|).

The following features are supported:

- Syntax highlighting of the following:
	- Local and global variables
	- FileMaker operators (i.e., +, -, &, etc.)
	- String and number literals
	- Built-in FileMaker functions
	- Built-in FileMaker constants (such as Get function parameters)
	- Block and in-line comments
	- Calculation variables that begin with an underscore or tilde (i.e., _foo
		or ~bar)
	- Custom functions that begin with a prepended code and dot (i.e.,
		code.CustomFunction( param )).
- With the installation of UltiSnips, intelligent snippet insertion for all of
	the built-in FileMaker functions.

																*FileMakerVim-requirements* *FMV-requirements*
1.1 Requirements

Currently there are two main feature sets included with filemaker.vim: syntax
highlighting and snippets. Syntax highlight only requires a copy of Vim and
installing the filemaker.vim plugin.

At this point filemaker.vim has been tested with MacVim snapshot 74 which runs
Vim 7.4 and command-line Vim 7.4 running within a terminal on Mac OS X. It
will probably work with Vim 7 or above on any platform suppored, but no
testing of this has been performed.

																			*FileMakerVim-ultisnips* *FMV-ultisnips*
1.1.1 Ultisnips

UltiSnips is a snippet system inspired by the snippets feature from TextMate.
Using the snippets feature requires UltiSnips, which you can get for free from
https://github.com/SirVer/ultisnips. See the installation instructions below
for additional details.

																	*FileMakerVim-quickcursor* *FMV-quickcursor*
1.1.2 QuickCursor

QuickCursor is in no way required for using filemaker.vim, but if you're using
a Mac and you have a version of it, it can make life much easier by allowing
you to press a key combination and open a FileMaker calculation directly in
MacVim.

Unfortunately QuickCursor is no longer being actively sold because of
incompatibility with Apple's sandboxing. If you were fortunate enough to get
version 2 before it was removed from the Mac App Store, you're good to go. The
publisher of QuickCursor has made the source code available at
https://github.com/jessegrosjean/quickcursor, but all attempts to build and
run it under OS X Yosemite have failed to demonstrate that it works
successfully.

In the future we hope to make either version 1 available for a free download
or edit the source code of version 2 and make it available. In the meantime,
if you're interested in a workaround, check out what some others have done by
replacing QuickCursor with custom-built routines built with Keyboard Maestro
(http://www.keyboardmaestro.com,
http://rocketink.net/2013/05/quickcursor-keyboard-maestro.html).

==============================================================================
														*FileMakerVim-installnupdate* *FMV-installnupdate*
2. Installation and Updating

Since it's far more likely that anyone interested in filemaker.vim knows
FileMaker and not Vim rather than the other way around, these instructions
will provide assume only that you have some version of Vim for your platform
and git. Getting filemaker.vim working with Vim on your machine is possible
without git, but such a procedure is not yet covered here.

You can get MacVim at https://code.google.com/p/macvim/ and gvim for Windows
at ftp://ftp.vim.org/pub/vim/pc/gvim74.exe.

																						*FileMakerVim-vundle* *FMV-vundle*
2.3 Vundle

Vundle is the recommended method for installing filemaker.vim. You can find
complete installation instructions for Vundle at
https://github.com/gmarik/Vundle.vim. Here's the quick version:

	1. Create a .vim directory in your home directory.
	2. Create a bundle directory in the .vim directory.
	3. Run the following command from your terminal application:>

	git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim

	4. Create a .vimrc file in your home directory and add the following lines
	to it>

	set runtimepath+=~/.vim/bundle/Vundle.vim
	call vundle#begin()
	Plugin 'gmarik/Vundle.vim'
	call vundle#end()
	filetype plugin indent on
	
	5. Quick Vim if it's already running and relaunch it.

											*FileMakerVim-ultisnips-install* *FMV-ultisnips-install*
2.4 UltiSnips

Now that Vundle is installed, installing UltiSnips is very easy. In your
.vimrc file, after the first call to Plugin, add the following lines:>

  Plugin 'SirVer/ultisnips'
  Plugin 'honza/vim-snippets'

The second one is completely optional, but will add many useful snippets for
other languages (C, PHP, JavaScript, etc.) as well as snippets for writing
snippets. See the UltiSnips documentation for more information.

Once you've added the above two lines to .vimrc, run the following command in
Vim:>

	:PluginInstall

																					*FileMakerVim-install* *FMV-insall*
2.5 filemaker.vim

Installing filemaker.vim is just like installing UltiSnips. Add this line to
.vimrc after your previous lines of calls to Plugin and before the call to
vundle#end():>

	Plugin 'chivalry/filemaker.vim'

Then again run the following command in Vim:>

	:PluginInstall

==============================================================================

																				*FileMakerVim-settings* *FMV-settings*
3. Settings
										*FileMakerVim-defaultconventions* *FMV-defaultconventions*
3.1 Default Conventions

Conventions in FileMaker are notoriously varried. By default the snippets
included with filemaker.vim conform to very specific conventions for
formatting FileMaker calculations. These include the following:

	- No space between a function name and its opening parenthsis.
	- A space between the opening and closing parenthses and the nearest
		parameter.
	- Functions with a single parameter are inserted on a single line.
	- Functions with multiple parameters are (generally) placed with each
		parameter on its own line.
	
Note the word "generally" above. Some functions often take a single parameter
but can take multiple parameters, especially the Aggregate (|FMV-aggregate|)
functions, such as Count (|FMV-count|). These multi-parameter functions are
placed on a single line with their optional parameters included as optional
tab stops.

							*FileMakerVim-overridingconventions* *FMV-overridingconventions*
3.2 Overriding Conventions

Most of the conventions above can be overridden by setting global variables in
your .vimrc file.

																									*g:FMVAddSpaceAfterFunction*
g:FMVAddSpaceAfterFunction			Defaults to false (0). If set to true (1) a
																space will appear between function names and
																their opening parenthsis.  For example, by
																default functions are inserted with the
																following format:>

																Func( param )

																By setting this variable to 1, functions will
																be inserted with the following format:>

																Funct ( param )

																									*g:FMVPadSpacesWithinParens*
g:FMVPadSpacesWithinParens			Defaults to true (1). If set to false (0),
																there will be no space between a function's
																parentheses and its parameters. For example,
																by default functions are inserted with the
																following format:>

																Func( param )

																If this variable is set to 0, functions will
																be inserted with the following format:>

																Func(param)

																							*g:FMVSeparateParamsWithSpace*
g:FMVSeparateParamsWithSpace		Defaults to false (0). If set to true (1),
																multi-parameter functions will have all of
																their parameters appear on the same line. For
																example, by default multi-parameter functions
																are inserted with the following format:>

																Func(
																	param1;
																	param2;
																)

																If this variable is set to 1, functions will
																be inserted with the following format:>

																Func( param1; param2 )

																Note that this does not yet apply to the Let
																(|FMV-let|) function.

																										*g:FMVFillInGetFileName*
g:FMVFillInGetFileName					Defaults to true (1). If set to false (0),
																functions that can take a Get( FileName )
																(|FMV-filename|) value as one of their
																parameters will get a generic parameter
																placeholder instead. For example, where such a
																function could take Get( FileMake ) as a
																paremter, such a function would have the
																following format by default:>

																Func( Get( FileName ) )

																with the Get( FileName ) portion being a
																snippet tab stop. If this variable is set to
																0, such a function would have the following
																format:>

																Func( fileName )

																				*FileMakerVim-triggers* *FMV-triggers*
3.3 Triggers
																					*FileMakerVim-helping* *FMV-helping*
==============================================================================

4. Helping Out
																					*FileMakerVim-contact* *FMV-contact*
==============================================================================

5. Contact
																*FileMakerVim-contributors* *FMV-contributors*
==============================================================================

6. Contributors

vim:tw=80:ts=8:ft=help:norl:
